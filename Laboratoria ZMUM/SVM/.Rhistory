dt = data.frame(x1 = c(x1_1, x1_0),
x2 = c(x2_1, x2_0),
y = c(rep(1, n), rep(0, n)))
ggplot(dt, aes(x = x1, y = x2)) + geom_point()
rm(list = ls())
n <- 500
x1_1 <- jitter(runif(n, min = -1, max = 1), factor  = 1000)
x2_1 <- sapply(x1_1, function(x) { sample(c(-1, 1), size = 1, prob = c(0.5, 0.5)) * sqrt(1 - x^2)})
x1_0 <- jitter(runif(n, min = -2, max = 2), factor = 1000)
x2_0 <- sapply(x1_0, function(x) { sample(c(-1, 1), size = 1, prob = c(0.5, 0.5)) * sqrt(4 - x^2)})
dt = data.frame(x1 = c(x1_1, x1_0),
x2 = c(x2_1, x2_0),
y = c(rep(1, n), rep(0, n)))
ggplot(dt, aes(x = x1, y = x2)) + geom_point()
rm(list = ls())
n <- 500
x1_1 <- jitter(runif(n, min = -1, max = 1))
x2_1 <- jitter(sapply(x1_1, function(x) { sample(c(-1, 1), size = 1, prob = c(0.5, 0.5)) * sqrt(1 - x^2)}))
x1_0 <- jitter(runif(n, min = -2, max = 2))
x2_0 <- jitter(sapply(x1_0, function(x) { sample(c(-1, 1), size = 1, prob = c(0.5, 0.5)) * sqrt(4 - x^2)}))
dt = data.frame(x1 = c(x1_1, x1_0),
x2 = c(x2_1, x2_0),
y = c(rep(1, n), rep(0, n)))
ggplot(dt, aes(x = x1, y = x2)) + geom_point()
x2_1 <- jitter(sapply(x1_1, function(x) { sample(c(-1, 1), size = 1, prob = c(0.5, 0.5)) * sqrt(1 - x^2)}), 2)
x1_0 <- jitter(runif(n, min = -2, max = 2))
x2_0 <- jitter(sapply(x1_0, function(x) { sample(c(-1, 1), size = 1, prob = c(0.5, 0.5)) * sqrt(4 - x^2)}), 5)
dt = data.frame(x1 = c(x1_1, x1_0),
x2 = c(x2_1, x2_0),
y = c(rep(1, n), rep(0, n)))
ggplot(dt, aes(x = x1, y = x2)) + geom_point()
rm(list = ls())
n <- 500
x1_1 <- jitter(runif(n, min = -1, max = 1))
x2_1 <- jitter(sapply(x1_1, function(x) { sample(c(-1, 1), size = 1, prob = c(0.5, 0.5)) * sqrt(1 - x^2)}), 10)
x1_0 <- jitter(runif(n, min = -2, max = 2))
x2_0 <- jitter(sapply(x1_0, function(x) { sample(c(-1, 1), size = 1, prob = c(0.5, 0.5)) * sqrt(4 - x^2)}), 10)
dt = data.frame(x1 = c(x1_1, x1_0),
x2 = c(x2_1, x2_0),
y = c(rep(1, n), rep(0, n)))
ggplot(dt, aes(x = x1, y = x2)) + geom_point()
noise <- function(num) {
return(rnorm(1, 0, 0.01))
}
# generowanie danych
rm(list = ls())
n <- 500
noise <- function(num) {
return(rnorm(1, 0, 0.01))
}
x1_1 <- runif(n, min = -1, max = 1)
x2_1 <- sapply(x1_1, function(x) { sample(c(-1, 1), size = 1, prob = c(0.5, 0.5)) * sqrt(1 - x^2)}) + noise()
x1_0 <- runif(n, min = -2, max = 2)
x2_0 <- sapply(x1_0, function(x) { sample(c(-1, 1), size = 1, prob = c(0.5, 0.5)) * sqrt(4 - x^2)}) + noise()
dt = data.frame(x1 = c(x1_1, x1_0),
x2 = c(x2_1, x2_0),
y = c(rep(1, n), rep(0, n)))
ggplot(dt, aes(x = x1, y = x2)) + geom_point()
c(1,2,3,4) + 1
rm(list = ls())
n <- 500
noise <- function(n) {
return(rnorm(n, 0, 0.01))
}
x1_1 <- runif(n, min = -1, max = 1)
x2_1 <- sapply(x1_1, function(x) { sample(c(-1, 1), size = 1, prob = c(0.5, 0.5)) * sqrt(1 - x^2)}) + noise()
x1_0 <- runif(n, min = -2, max = 2)
x2_0 <- sapply(x1_0, function(x) { sample(c(-1, 1), size = 1, prob = c(0.5, 0.5)) * sqrt(4 - x^2)}) + noise()
dt = data.frame(x1 = c(x1_1, x1_0),
x2 = c(x2_1, x2_0),
y = c(rep(1, n), rep(0, n)))
ggplot(dt, aes(x = x1, y = x2)) + geom_point()
# generowanie danych
rm(list = ls())
n <- 500
noise <- function(n) {
return(rnorm(n, 0, 0.01))
}
x1_1 <- runif(n, min = -1, max = 1)
x2_1 <- sapply(x1_1, function(x) { sample(c(-1, 1), size = 1, prob = c(0.5, 0.5)) * sqrt(1 - x^2)}) + noise(n)
x1_0 <- runif(n, min = -2, max = 2)
x2_0 <- sapply(x1_0, function(x) { sample(c(-1, 1), size = 1, prob = c(0.5, 0.5)) * sqrt(4 - x^2)}) + noise(n)
dt = data.frame(x1 = c(x1_1, x1_0),
x2 = c(x2_1, x2_0),
y = c(rep(1, n), rep(0, n)))
ggplot(dt, aes(x = x1, y = x2)) + geom_point()
rm(list = ls())
n <- 500
noise <- function(n) {
return(rnorm(n, 0, 0.1))
}
x1_1 <- runif(n, min = -1, max = 1)
x2_1 <- sapply(x1_1, function(x) { sample(c(-1, 1), size = 1, prob = c(0.5, 0.5)) * sqrt(1 - x^2)}) + noise(n)
x1_0 <- runif(n, min = -2, max = 2)
x2_0 <- sapply(x1_0, function(x) { sample(c(-1, 1), size = 1, prob = c(0.5, 0.5)) * sqrt(4 - x^2)}) + noise(n)
dt = data.frame(x1 = c(x1_1, x1_0),
x2 = c(x2_1, x2_0),
y = c(rep(1, n), rep(0, n)))
ggplot(dt, aes(x = x1, y = x2)) + geom_point()
ggplot(dt, aes(x = x1, y = x2, color = y)) + geom_point()
ggplot(dt, aes(x = x1, y = x2, color = as.factor(y))) + geom_point()
?legend
ggplot(dt, aes(x = x1, y = x2, color = as.factor(y))) + geom_point() +
legend(legend = 'class')
ggplot(dt, aes(x = x1, y = x2, color = as.factor(y))) + geom_point() +
+ scale_fill_discrete(name = "class")
ggplot(dt, aes(x = x1, y = x2, color = as.factor(y))) + geom_point() +
+ scale_fill_discrete(name = "class")
ggplot(dt, aes(x = x1, y = x2, color = as.factor(y))) + geom_point() +
scale_fill_discrete(name = "class")
ggplot(dt, aes(x = x1, y = x2, color = as.factor(y))) + geom_point() +
scale_color_discrete(name = "class")
library(e1071)
?svm
model.linear <- svm(as.factor(y) ~. , data = dt, kernel = 'linear')
model.linear
pred.linear <- predict(model.linear, newdata = dt)
pred.linear
?expand.grid
x1 <- seq(min(dt$x1), max(dt$x1), length.out = 100)
x2 <- seq(min(dt$x2), max(dt$x2), length.out = 100)
grd <- expand.grid(x1 = x1, x2 =  x2)
z <- predict(model.linear, newdata = dt)
z <- predict(model.linear, newdata = dt, type = 'response')
z <- predict(model.linear, newdata = dt, type = 'prob')
z
z <- predict(model.linear, newdata = grd, type = 'prob')
z
z <- predict(model.linear, newdata = grd, type = 'response')
z
y <- c(rep(1, 500), rep(0, 500))
x <- matrix(0, ncol = 2, nrow = 1000)
# generujemy obserwacje z klasy 1
x[1:500, 1] <- runif(500, -1, 1)
x[1:500, 2] <- sample(x = c(-1, 1), size = 500, replace = T, prob = c(0.5, 0.5))*sqrt(1-x[1:500, 1]^2)
# generujemy obserwacje z klasy 0
x[501:1000, 1] <- runif(500, -2, 2)
x[501:1000, 2] <- sample(x = c(-1, 1), size = 500, replace = T, prob = c(0.5, 0.5))*sqrt(4-x[501:1000, 1]^2)
# dodajemy szum do zmiennej x2
x[, 2] <- x[, 2] + rnorm(1000, 0, 0.1)
# wykres rozproszenia zmiennych w klasach
plot(x[, 1], x[, 2], col = as.factor(y))
# lub w ggplot2
library(ggplot2)
q <- ggplot(data = data.frame(y = y, x = x), aes(x = x.1, y = x.2, col = as.factor(y)))+
geom_point(size = 2.5) +
xlab("x1") + ylab("x2") +
theme(axis.title.x = element_text(size = 15, angle = 0, face = "italic"),
axis.title.y = element_text(size = 15, angle = 90, face = "italic")) +
theme(legend.title = element_text(size = 14, face = "bold")) +
theme(legend.text = element_text(colour = "black", size = 12)) +
guides(color = guide_legend(keywidth = 2, keyheight = 2)) +
labs(colour = "y")
q
ggsave(filename = "svm.pdf", plot = q, width = 10, height = 8)
# dla tak wygenerowanych danych testujemy dzialanie metody svm z roznymi jadrami
library(e1071)
model1 <- svm(x, as.factor(y), kernel = "linear")
yhat1 <- predict(model1, x)
q1 <- ggplot(data = data.frame(y = yhat1, x = x), aes(x = x.1, y = x.2, col = as.factor(y)))+
geom_point(size = 2.5) +
xlab("x1") + ylab("x2") +
theme(axis.title.x = element_text(size = 15, angle = 0, face = "italic"),
axis.title.y = element_text(size = 15, angle = 90, face = "italic")) +
theme(legend.title = element_text(size = 14, face = "bold")) +
theme(legend.text = element_text(colour = "black", size = 12)) +
guides(color = guide_legend(keywidth = 2, keyheight = 2)) +
labs(colour = "y")
q1
model2 <- svm(x, as.factor(y), kernel = "radial")
yhat2 <- predict(model2, x)
q2 <- ggplot(data = data.frame(y = yhat2, x = x), aes(x = x.1, y = x.2, col = as.factor(y)))+
geom_point(size = 2.5) +
xlab("x1") + ylab("x2") +
theme(axis.title.x = element_text(size = 15, angle = 0, face = "italic"),
axis.title.y = element_text(size = 15, angle = 90, face = "italic")) +
theme(legend.title = element_text(size = 14, face = "bold")) +
theme(legend.text = element_text(colour = "black", size = 12)) +
guides(color = guide_legend(keywidth = 2, keyheight = 2)) +
labs(colour = "y")
q2
rm(list = ls())
n <- 500
noise <- function(n) {
return(rnorm(n, 0, 0.1))
}
x1_1 <- runif(n, min = -1, max = 1)
x2_1 <- sapply(x1_1, function(x) { sample(c(-1, 1), size = 1, prob = c(0.5, 0.5)) * sqrt(1 - x^2)}) + noise(n)
x1_0 <- runif(n, min = -2, max = 2)
x2_0 <- sapply(x1_0, function(x) { sample(c(-1, 1), size = 1, prob = c(0.5, 0.5)) * sqrt(4 - x^2)}) + noise(n)
dt = data.frame(x1 = c(x1_1, x1_0),
x2 = c(x2_1, x2_0),
y = c(rep(1, n), rep(0, n)))
ggplot(dt, aes(x = x1, y = x2, color = as.factor(y))) + geom_point() +
scale_color_discrete(name = "class")
#SVM
library(e1071)
model.linear <- svm(as.factor(y) ~. , data = dt, kernel = 'linear')
pred.linear <- predict(model.linear, newdata = dt)
ggplot(dt, aes(x1 = x1, x2 = x2, color = as.factor(pred.linear))) + geom_point()
ggplot(dt, aes(x = x1, y = x2, color = as.factor(pred.linear))) + geom_point()
+ scale_color_discrete(name = "class")
ggplot(dt, aes(x = x1, y = x2, color = as.factor(pred.linear))) + geom_point() +
scale_color_discrete(name = "class")
ggplot(dt, aes(x = x1, y = x2, color = as.factor(pred.linear), shape = as.factor(y))) + geom_point() +
scale_color_discrete(name = "predicted class")
ggplot(dt, aes(x = x1, y = x2, color = as.factor(pred.linear), shape = as.factor(y))) + geom_point() +
scale_color_discrete(name = "predicted class") +
scale_shape_discrete(name = "real class")
model.radial = svm(as.factor(y) ~. , data = dt, kernel = 'radial')
pred.radial = predict(model.radial, newdata = dt)
ggplot(dt, aes(x = x1, y = x2, color = as.factor(pred.radial), shape = as.factor(y))) + geom_point() +
scale_color_discrete(name = "predicted class") +
scale_shape_discrete(name = "real class")
?svm.kernel
?svm
p.linear <-  ggplot(dt, aes(x = x1, y = x2, color = as.factor(pred.linear), shape = as.factor(y))) + geom_point() +
scale_color_discrete(name = "predicted class") +
scale_shape_discrete(name = "real class")
p.radial <- ggplot(dt, aes(x = x1, y = x2, color = as.factor(pred.radial), shape = as.factor(y))) + geom_point() +
scale_color_discrete(name = "predicted class") +
scale_shape_discrete(name = "real class")
p.poly <- ggplot(dt, aes(x = x1, y = x2, color = as.factor(pred.poly), shape = as.factor(y))) + geom_point() +
scale_color_discrete(name = "predicted class") +
scale_shape_discrete(name = "real class")
library(patchwork)
p.linear + p.radial + p.poly
p.linear <-  ggplot(dt, aes(x = x1, y = x2, color = as.factor(pred.linear), shape = as.factor(y))) + geom_point() +
scale_color_discrete(name = "predicted class") +
scale_shape_discrete(name = "real class")
# radialne jądro
model.radial = svm(as.factor(y) ~. , data = dt, kernel = 'radial')
pred.radial = predict(model.radial, newdata = dt)
p.radial <- ggplot(dt, aes(x = x1, y = x2, color = as.factor(pred.radial), shape = as.factor(y))) + geom_point() +
scale_color_discrete(name = "predicted class") +
scale_shape_discrete(name = "real class")
# wielomianowe jądro
model.poly = svm(as.factor(y) ~. , data = dt, kernel = 'polynomial')
pred.poly = predict(model.poly, newdata = dt)
p.poly <- ggplot(dt, aes(x = x1, y = x2, color = as.factor(pred.poly), shape = as.factor(y))) + geom_point() +
scale_color_discrete(name = "predicted class") +
scale_shape_discrete(name = "real class")
p.linear + p.radial + p.poly
p.linear <-  ggplot(dt, aes(x = x1, y = x2, color = as.factor(pred.linear), shape = as.factor(y))) + geom_point() +
scale_color_discrete(name = "predicted class") +
scale_shape_discrete(name = "real class") +
ggtitle('Linear kernel') +
theme(plot.title = element_text(hjust = 0.5))
# radialne jądro
model.radial = svm(as.factor(y) ~. , data = dt, kernel = 'radial')
pred.radial = predict(model.radial, newdata = dt)
p.radial <- ggplot(dt, aes(x = x1, y = x2, color = as.factor(pred.radial), shape = as.factor(y))) + geom_point() +
scale_color_discrete(name = "predicted class") +
scale_shape_discrete(name = "real class") +
ggtitle('Radial kernel') +
theme(plot.title = element_text(hjust = 0.5))
# wielomianowe jądro
model.poly = svm(as.factor(y) ~. , data = dt, kernel = 'polynomial')
pred.poly = predict(model.poly, newdata = dt)
p.poly <- ggplot(dt, aes(x = x1, y = x2, color = as.factor(pred.poly), shape = as.factor(y))) + geom_point() +
scale_color_discrete(name = "predicted class") +
scale_shape_discrete(name = "real class") +
ggtitle('Polynomial kernel') +
theme(plot.title = element_text(hjust = 0.5))
library(patchwork)
p.linear + p.radial + p.poly
rm(list = ls())
dat <- read.table('../data/realest.txt')
head(dat)
dat <- read.table('../data/realest.txt', header = TRUE)
head(dat)
model.linear <- lm(Price ~. , data = dat)
model.linear
summary(model.linear)
dat2 <- dat
dat2$Bedroom <- dat2$Bedroom + 1
model.linear2 <- lm(Price ~. , data = dat2)
summary(model.linear2)
model.linear_simple1 <- lm(Price ~ ., data = dat[c('Price', 'Bedroom')])
summary(model.linear_simple1)
model.linear_simple2 <- lm(Price ~ ., data = dat2[c('Price', 'Bedroom')])
summary(model.linear_simple2)
summary(model.linear_simple1)
summary(model.linear_simple2)
head(dat)
myhouse <- data.frame(Bedroom = 3, Space = 1500, Room = 8, Lot = 40,
Tax = 1000, Bathroom = 2, Garage = 1, Condition = 1)
predict(model.linear, myhouse)
price <- predict(model.linear, myhouse)
# Z definicji
coefs = model.linear$coefficients
coefs
price = coefs[1] + coefs[2:length(coefs)] * myhouse
price
price = coefs[1] + sum(coefs[2:length(coefs)] * myhouse)
price
# predict
price <- predict(model.linear, myhouse)
price
library(car)
library(CAR)
install.packages("car")
library(car)
dat <- USPop
head(USPop)
summary(USPop)
?nls
DNase
popn <- nls(population ~ beta1 / exp(beta2 + years * beta3) , data = dat,
start = list(beta1 = 350, beta2 = 4.5, beta3 = -0.3))
head(USPop)
popn <- nls(population ~ beta1 / exp(beta2 + year * beta3) , data = dat,
start = list(beta1 = 350, beta2 = 4.5, beta3 = -0.3))
popn <- nls(population ~ beta1 / exp(beta2 + time * beta3) , data = dat,
start = list(beta1 = 350, beta2 = 4.5, beta3 = -0.3),
trace = TRUE)
popn <- nls(population ~ beta1 / (1 + exp(beta2 + time * beta3)) , data = dat,
start = list(beta1 = 350, beta2 = 4.5, beta3 = -0.3),
trace = TRUE)
time <- 0:21
popn <- nls(population ~ beta1 / (1 + exp(beta2 + beta3*time)) , data = dat,
start = list(beta1 = 350, beta2 = 4.5, beta3 = -0.3),
trace = TRUE)
popn
popn$convInfo
popn$m
popn$data
popn$call
popn$dataClasses
popn$control
popn
beta1 <- 440.8332
beta2 <- 4.0324
beta3 <- -0.2161
ggplot(data = dat, aes(x = year, y = population)) + geom_point()
library (dplyr)
dat <- dat %>% mutate(yi = beta1 / (1 + exp(beta2 + beta3*time))) %>% data.frame
head(dat)
ggplot(data = dat, aes(x = year, y = population)) + geom_point() +
geom_line(data = dat, aes(x = year, y = yi))
ggplot(data = dat, aes(x = year, y = population)) + geom_point() +
geom_line(data = dat, aes(x = year, y = yi), col= 'red')
summary(dat)
pop_2015 <- beta1 / (1 + exp(beta2 + beta3*22.5))
pop_2015
#analogicznie predictem
predict(popn, time = 22.5)
#analogicznie predictem
predict(popn, list(time = 22.5))
n <- 1000
fun <- function(x){
y = 4.26 * (exp(-x) - 4 * exp(-2 * x) + 3 * exp(-3 * x)) + rnorm(n = 1, mean = 0, sd = 0.1)
}
y <- sapply(seq(0, n), fun)
y <- sapply(seq(1, n), fun)
?ksmooth
x <- seq(1, n)
model.ksmooth <- ksmooth(x, y)
vals <- predict(model.ksmooth, x)
vals <- predict(model.ksmooth, data = x)
vals <- predict(model.ksmooth, newdata = x)
model.ksmooth
vals <- plot(model.ksmooth$x, model.ksmooth$y)
krzywa = function(x) {
4.26*(exp(-x)-4*exp(-2*x)+3*exp(-3*x))
}
n=1000
x=runif(n,min=0,max=3.5)
x=sort(x)
e=rnorm(n,0,0.1)
y=krzywa(x)+e
yteor=krzywa(x)
plot(x,y)
lines(x,yteor)
x <- runif(n, 0, 3.5)
y <- sapply(x, fun)
model.ksmooth <- ksmooth(x, y)
vals <- plot(model.ksmooth$x, model.ksmooth$y)
n <- 100
fun <- function(x){
y = 4.26 * (exp(-x) - 4 * exp(-2 * x) + 3 * exp(-3 * x)) + rnorm(n = 1, mean = 0, sd = 0.1)
}
x <- runif(n, 0, 3.5)
y <- sapply(x, fun)
model.ksmooth <- ksmooth(x, y)
plot(model.ksmooth$x, model.ksmooth$y)
plot(x, y)
lines(model.ksmooth$x, model.ksmooth$y)
lines(x,yteor)
n=1000
x=runif(n,min=0,max=3.5)
x=sort(x)
e=rnorm(n,0,0.1)
y=krzywa(x)+e
yteor=krzywa(x)
plot(x,y)
lines(x,yteor)
#Estymator jadrowy:
est.ksmooth = ksmooth(x,y)
#Smooth Spline:
est.spline=smooth.spline(x,y)
plot(x,y)
#Estymator jadrowy:
est.ksmooth = ksmooth(x,y)
krzywa = function(x) {
4.26*(exp(-x)-4*exp(-2*x)+3*exp(-3*x))
}
n=1000
x=runif(n,min=0,max=3.5)
x=sort(x)
e=rnorm(n,0,0.1)
y=krzywa(x)+e
yteor=krzywa(x)
plot(x,y)
lines(x,yteor)
#Estymator jadrowy:
est.ksmooth = ksmooth(x,y)
#Smooth Spline:
est.spline=smooth.spline(x,y)
#Lokalnie wielomianowy:
est.loess1=loess(y~x)
plot(x,y,main="Jadrowy")
lines(x,yteor,lwd=2)
lines(est.ksmooth,col="red",lwd=2)
lines(x,est.loess1$fitted,lty=1,col="blue")
lines(est.spline,col="orange",lwd=2)
n <- 100
fun <- function(x){
y = 4.26 * (exp(-x) - 4 * exp(-2 * x) + 3 * exp(-3 * x))
}
x <- sort(runif(n, 0, 3.5))
yteor <- sapply(x, fun)
y <- yteor + + rnorm(n, mean = 0, sd = 0.1)
model.ksmooth <- ksmooth(x, y)
plot(x, y)
lines(model.ksmooth$x, model.ksmooth$y)
n <- 300
fun <- function(x){
y = 4.26 * (exp(-x) - 4 * exp(-2 * x) + 3 * exp(-3 * x))
}
x <- sort(runif(n, 0, 3.5))
yteor <- sapply(x, fun)
y <- yteor + + rnorm(n, mean = 0, sd = 0.1)
model.ksmooth <- ksmooth(x, y)
plot(x, y)
lines(model.ksmooth$x, model.ksmooth$y)
lines(x, yteor)
?loess
model.loess <- loess(formula = y ~ x, list(x, y))
model.loess
pred.loess <- predict(model.loess, data = list(x,y))
lines(x, pred.loess)
lines(x, yteor, col = 'yellow', size = 2)
lines(x, yteor, col = 'orange', size = 2)
lines(x, yteor, col = 'orange', size = 3)
lines(x, yteor, col = 'orange', lwd = 2)
lines(model.ksmooth$x, model.ksmooth$y, col = 'blue', lwd = 2)
lines(x, pred.loess, col = 'red', lwd = 2)
?smooth.spline
model.spline <- smooth.spline(x = x, y = y)
model.spline
pred.spline <- predict(model.spline, data = list(x,y))
lines(x, pred.spline, col = 'magenta', lwd = 2)
pred.spline <- predict(model.spline, data = list(x,y))
lines(x, pred.spline, col = 'magenta', lwd = 2)
model.spline <- smooth.spline(x, y)
pred.spline <- predict(model.spline, data = list(x,y))
lines(x, pred.spline, col = 'magenta', lwd = 2)
pred.spline
lines(pred.spline$x, pred.spline$y , col = 'magenta', lwd = 2)
ggplot(data = list(x, y)) + geom_point()
ggplot(data = data.frame(x = x, y = y)) + geom_point()
ggplot(data = list(x, y), aes(x = x, y = y)) + geom_point()
ggplot(data = data.frame(x = x, y = y), aes(x = x, y = y)) + geom_point()
ggplot(data = data.frame(x = x, y = y), aes(x = x, y = y)) + geom_point() +
geom_line(data = data.frame(x = x, y = yteor))
ggplot(data = data.frame(x = x, y = y), aes(x = x, y = y)) + geom_point() +
geom_line(data = data.frame(x = x, y = yteor), col = 'red', size = 2)
ggplot(data = data.frame(x = x, y = y), aes(x = x, y = y)) + geom_point() +
geom_line(data = data.frame(x = x, y = yteor), col = 'red', size = 1)
ggplot(data = data.frame(x = x, y = y), aes(x = x, y = y)) + geom_point() +
geom_line(data = data.frame(x = x, y = yteor), col = 'red', size = 1.5)
p1 <- ggplot(data = data.frame(x = x, y = y), aes(x = x, y = y)) + geom_point() +
geom_line(data = data.frame(x = x, y = yteor), col = 'orange', size = 1.5) +
ggtitle('Teoretical curve')
p2 <- ggplot(data = data.frame(x = x, y = y), aes(x = x, y = y)) + geom_point() +
geom_line(data = data.frame(x = model.ksmooth$x, y = model.ksmooth$y), col = 'red', size = 1.5) +
ggtitle('Ksmooth estimator')
p3 <- ggplot(data = data.frame(x = x, y = y), aes(x = x, y = y)) + geom_point() +
geom_line(data = data.frame(x = x, y = pred.loess), col = 'blue', size = 1.5) +
ggtitle('Loess estimator')
p4 <- ggplot(data = data.frame(x = x, y = y), aes(x = x, y = y)) + geom_point() +
geom_line(data = data.frame(x = pred.spline$x, y = pred.spline$y), col = 'magenta', size = 1.5) +
ggtitle('Smooth.spline estimator')
(p1 + p2) / (p3 + p4)
p1 <- ggplot(data = data.frame(x = x, y = y), aes(x = x, y = y)) + geom_point() +
geom_line(data = data.frame(x = x, y = yteor), col = 'orange', size = 1.5) +
ggtitle('Teoretical curve') +
theme(plot.title = element_text(hjust = 0.5))
p2 <- ggplot(data = data.frame(x = x, y = y), aes(x = x, y = y)) + geom_point() +
geom_line(data = data.frame(x = model.ksmooth$x, y = model.ksmooth$y), col = 'red', size = 1.5) +
ggtitle('Ksmooth estimator') +
theme(plot.title = element_text(hjust = 0.5))
p3 <- ggplot(data = data.frame(x = x, y = y), aes(x = x, y = y)) + geom_point() +
geom_line(data = data.frame(x = x, y = pred.loess), col = 'blue', size = 1.5) +
ggtitle('Loess estimator') +
theme(plot.title = element_text(hjust = 0.5))
p4 <- ggplot(data = data.frame(x = x, y = y), aes(x = x, y = y)) + geom_point() +
geom_line(data = data.frame(x = pred.spline$x, y = pred.spline$y), col = 'magenta', size = 1.5) +
ggtitle('Smooth.spline estimator') +
theme(plot.title = element_text(hjust = 0.5))
(p1 + p2) / (p3 + p4)
